<ServerManagerConfiguration>
  <ProxyGroup name="sources">
    <SourceProxy label="Raw Image Reader" name="TVRawImageReader" class="vtkPVImageReader">
      <Documentation long_help="Reads raw regular rectilinear grid data from a file. The dimensions and type of the data must be specified."
                     short_help="Read raw regular rectilinear grid data from a file.">
                     The Image reader reads raw, regular, rectilinear grid
                     (image/volume) data from a file. Because no metadata is
                     provided, the user must specify information about the
                     size, spacing, dimensionality, etc. about the
                     dataset.</Documentation>
      <!-- Unlike most readers, we need to show the "filename" so that users
          can strip off the extension and replace it in the file pattern.
          I'm creating this "Property" hint that has an attribute to force
          whether the given property is shown in the GUI or not. -->
      <Hints>
        <Property name="FilePrefix"
                  show="1" />
        <ReaderFactory extensions="raw dat bin"
                       file_description="Raw (binary) Files" />
      </Hints>
      <StringVectorProperty command="SetFilePrefix"
                            name="FilePrefix"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>The text string contained in this property specifies the
        file prefix (directory plus common initial part of file name) for the
        raw binary uniform rectilinear grid dataset.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetFilePattern"
                            default_values="%s"
                            name="FilePattern"
                            number_of_elements="1">
        <Documentation>The text string contained in the property specifies the
        format string to determine the file names necessary for reading this
        dataset. In creating the filenames, %s will be replaced by the prefix
        and %d by a digit which represents the slice number in Z. The format
        string is the same as that used by printf.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDataScalarType"
                         default_values="4"
                         name="DataScalarType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="char"
                 value="2" />
          <Entry text="unsigned char"
                 value="3" />
          <Entry text="short"
                 value="4" />
          <Entry text="unsigned short"
                 value="5" />
          <Entry text="int"
                 value="6" />
          <Entry text="unsigned int"
                 value="7" />
          <Entry text="long"
                 value="8" />
          <Entry text="unsigned long"
                 value="9" />
          <Entry text="float"
                 value="10" />
          <Entry text="double"
                 value="11" />
        </EnumerationDomain>
        <Documentation>The value of this property indicates the scalar type of
        the pixels/voxels in the file(s): short, int, float ...</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetDataByteOrder"
                         default_values="1"
                         name="DataByteOrder"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="BigEndian"
                 value="0" />
          <Entry text="LittleEndian"
                   value="1" />
        </EnumerationDomain>
        <Documentation>This property indicates the byte order of the binary
        file(s).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetFileDimensionality"
                         default_values="3"
                         name="FileDimensionality"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="2"
                 value="2" />
          <Entry text="3"
                 value="3" />
        </EnumerationDomain>
        <Documentation>This property indicates whether the file(s) in this
        dataset contain slices (2D) or volumes (3D).</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetDataOrigin"
                            default_values="0.0 0.0 0.0"
                            name="DataOrigin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>The coordinate contained in this property specifies the
        position of the point with index (0,0,0).</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDataSpacing"
                            default_values="1.0 1.0 1.0"
                            name="DataSpacing"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property specifies the size of a voxel in each
        dimension.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetDataExtent"
                         default_values="0 0 0 0 0 0"
                         name="DataExtent"
                         number_of_elements="6">
        <IntRangeDomain name="range" />
        <Documentation>This property specifies the minimum and maximum index
        values of the data in each dimension (xmin, xmax, ymin, ymax, zmin,
        zmax).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetNumberOfScalarComponents"
                         default_values="1"
                         name="NumberOfScalarComponents"
                         number_of_elements="1">
        <IntRangeDomain name="range" />
        <Documentation>This property specifies the number of components the
        scalar value at each pixel or voxel has (e.g., RGB - 3 scalar
        components).</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetScalarArrayName"
                            default_values="ImageFile"
                            name="ScalarArrayName"
                            number_of_elements="1">
        <Documentation>This property contains a text string listing a name to
        assign to the point-centered data array read.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetFileLowerLeft"
                         default_values="1"
                         name="FileLowerLeft"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property determines whether the data originates in
        the lower left corner (on) or the upper left corner (off). Most
        scientific data is written with a right-handed axes that originates in
        the lower left corner. However, several 2D image file formats write the
        image from the upper left corner.</Documentation>
      </IntVectorProperty>
      <!-- End ImageReader -->
    </SourceProxy>
  </ProxyGroup>
  <ProxyGroup name="tomviz_proxies">
    <Proxy name="NonOrthogonalSlice">
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If set to on, the color map will always be
        used for scalar mapping. If set to off, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty default_values="1" number_of_elements="1" name="ShowArrow">
        <BooleanDomain name="bool"/>
      </IntVectorProperty>
      <DoubleVectorProperty name="PointOnPlane" default_values="0 0 0" number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Hints>
          <ShowComponentLabels>
            <ComponentLabel component="0" label="X:" />
            <ComponentLabel component="1" label="Y:" />
            <ComponentLabel component="2" label="Z:" />
          </ShowComponentLabels>
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty name="PlaneNormal" default_values="1 0 0" number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Hints>
          <ShowComponentLabels>
            <ComponentLabel component="0" label="X:" />
            <ComponentLabel component="1" label="Y:" />
            <ComponentLabel component="2" label="Z:" />
          </ShowComponentLabels>
        </Hints>
      </DoubleVectorProperty>
    </Proxy>
    <Proxy name="PythonProgrammableSegmentation">
      <StringVectorProperty name="Script" number_of_elements="1">
        <Hints>
          <Widget type="multi_line" syntax="python" />
        </Hints>
      </StringVectorProperty>
    </Proxy>
  </ProxyGroup>
  <ProxyGroup name="filters">
    <!-- Flying Edges -->
    <SourceProxy class="vtkFlyingEdges3D"
                 name="FlyingEdges">
      <Documentation long_help="Generate isolines or isosurfaces using point scalars."
                     short_help="Generate isolines or isosurfaces.">The FlyingEdges
                     filter computes isolines or isosurfaces using a selected
                     point-centered scalar array.  The output of this filter is
                     polygonal.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array"
                          number_of_components="1" />
        <Documentation>This property specifies the input dataset to be used by
        the contour filter.</Documentation>
      </InputProperty>
      <StringVectorProperty animateable="0"
                            command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            label="Contour By"
                            name="SelectInputScalars"
                            number_of_elements="5">
        <ArrayListDomain attribute_type="Scalars"
                         name="array_list">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>This property specifies the name of the scalar array
        from which the contour filter will compute isolines and/or
        isosurfaces.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetComputeNormals"
                         default_values="1"
                         name="ComputeNormals"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Hints>
          <PropertyWidgetDecorator type="NonPolyDataInputDecorator" />
        </Hints>
        <Documentation>If this property is set to 1, a scalar array containing
        a normal value at each point in the isosurface or isoline will be
        created by the contour filter; otherwise an array of normals will not
        be computed. This operation is fairly expensive both in terms of
        computation time and memory required, so if the output dataset produced
        by the contour filter will be processed by filters that modify the
        dataset's topology or geometry, it may be wise to set the value of this
        property to 0. Select whether to compute normals.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetComputeGradients"
                         default_values="0"
                         name="ComputeGradients"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Hints>
          <PropertyWidgetDecorator type="InputDataTypeDecorator" name="Structured" />
        </Hints>
        <Documentation>If this property is set to 1, a scalar array containing
        a gradient value at each point in the isosurface or isoline will be
        created by this filter; otherwise an array of gradients will not be
        computed. This operation is fairly expensive both in terms of
        computation time and memory required, so if the output dataset produced
        by the contour filter will be processed by filters that modify the
        dataset's topology or geometry, it may be wise to set the value of this
        property to 0. Not that if ComputeNormals is set to 1, then gradients
        will have to be calculated, but they will only be stored in the output
        dataset if ComputeGradients is also set to 1.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetComputeScalars"
                         default_values="0"
                         name="ComputeScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, an array of scalars
        (containing the contour value) will be added to the output dataset. If
        set to 0, the output will not contain this array.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetValue"
                            label="Value"
                            name="ContourValues"
                            number_of_elements="0"
                            number_of_elements_per_command="1"
                            repeat_command="1"
                            set_number_command="SetNumberOfContours"
                            use_index="1"
                            panel_widget="double_slider_widget">
        <ArrayRangeDomain name="scalar_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SelectInputScalars" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <Documentation>This property specifies the values at which to compute
        isosurfaces/isolines and also the number of such
        values.</Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Value">
        <Property name="ContourValues" />
      </PropertyGroup>
      <!-- End Flying Edges -->
    </SourceProxy>
  </ProxyGroup>
</ServerManagerConfiguration>
